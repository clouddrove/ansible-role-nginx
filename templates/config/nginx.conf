# {{ ansible_managed }}
worker_processes  auto;
worker_rlimit_nofile 100000;
pid     /var/run/nginx.pid;

error_log /var/log/nginx/error.log;

events {
    worker_connections  19000;
    multi_accept on;
    use epoll;
}

http   {

    #resolver 8.8.8.8 valid=1200s;

    ## prevenet server version in the headers
    server_tokens  off;
    charset        utf-8;
    source_charset utf-8;
    server_names_hash_bucket_size 128;

    ## Log formats
    include /etc/nginx/site.d/log_format.conf;

    access_log /var/log/nginx/access.log;

    ## Size Limits & Buffer Overflows
    ## ensure zero calls are written to disk
    client_body_buffer_size     2m;
    client_header_buffer_size   16k;
    client_max_body_size        16M;
    large_client_header_buffers 8 512k;
    client_body_temp_path       /tmp/client_body_temp;

    proxy_buffering off;

    #proxy_buffers 8 2m;
    #proxy_buffer_size 10m;
    #proxy_busy_buffers_size 10m;

    # allow odd HTTP headers from Barracuda devices http://stackoverflow.com/questions/8300136/where-does-the-cuda-cliip-http-header-come-from
    underscores_in_headers on;


    ## Timeouts, this conf prevent php-fpm cpu overload, a little...
    client_header_timeout 240;
    client_body_timeout   240;
    keepalive_timeout     10;
    port_in_redirect	  off;
    sendfile              on;
    tcp_nopush            on;
    tcp_nodelay           on;

    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    proxy_read_timeout          600;
    send_timeout                600;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    ## Index
    autoindex off;
    index         index.html index.php;
    include       /etc/nginx/site.d/mime.types.conf;
    default_type  application/octet-stream;

    ## Cache open FD
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 600s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    ## Gzipping is an easy way to reduce page weight
    gzip                on;
    gzip_vary           on;
    gzip_proxied        any;
    gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/rss+xml
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    application/x-javascript
    font/opentype
    image/svg+xml
    image/x-icon
    text/css
    text/javascript
    text/plain
    text/x-component;

    gzip_disable        "MSIE [1-6].(?!.*SV1)";
    gzip_buffers        16 8k;
    gzip_comp_level     7;
    gzip_min_length     1024;
    gzip_proxied        expired no-cache no-store private auth;

    ## Use when Varnish in front
    #set_real_ip_from 127.0.0.1;
    #real_ip_header X-Forwarded-For;

    ## Map status to exclude from access log
    map $status $writelog { 444  0; default 1; }
    ## flood and rate limiting
    include /etc/nginx/site.d/http_real_ip_limit.conf;


{% if proxy_cache is defined and proxy_cache == True -%}
proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATICCACHE:100m inactive=1d max_size=1024m;
proxy_cache STATICCACHE;
proxy_cache_key $scheme$host$request_method$request_uri$cookie_language$cookie_currency;
# note: can also use HTTP headers to form the cache key, e.g.
# fastcgi_cache_key $scheme$request_method$host$request_uri$http_x_custom_header;
# Cache locking mechanism for protecting the backend of too many simultaneous requests.
proxy_cache_lock on;
proxy_cache_use_stale error timeout invalid_header updating http_500;
proxy_pass_request_headers on;
proxy_cache_valid 200 302 10m;
proxy_cache_valid 304     10m;
proxy_cache_valid 301      1h;
proxy_cache_valid any      1m;
# Hit a URL 3 times before caching it
proxy_cache_min_uses 3;
  {%- endif %}

{% if fastcgi_cache is defined and fastcgi_cache == True -%}
     fastcgi_cache_path /var/cache/nginx levels=1:2 keys_zone=MICROCACHE:100m inactive=1d max_size=1024m;

     fastcgi_cache MICROCACHE;
     fastcgi_cache_key $scheme$host$request_method$request_uri$cookie_language$cookie_currency;
     # note: can also use HTTP headers to form the cache key, e.g.
     # fastcgi_cache_key $scheme$request_method$host$request_uri$http_x_custom_header;
     # Cache locking mechanism for protecting the backend of too many simultaneous requests.
     fastcgi_cache_lock on;
     fastcgi_cache_use_stale error timeout invalid_header updating http_500;
     fastcgi_pass_request_headers on;
     fastcgi_cache_valid 200 302 10m;
     fastcgi_cache_valid 304     10m;
     fastcgi_cache_valid 301      1h;
     fastcgi_cache_valid any      1m;
     # Hit a URL 3 times before caching it
     fastcgi_cache_min_uses 3;
{%- endif %}
    include /etc/nginx/sites-enabled/*;
}
